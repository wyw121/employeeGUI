use anyhow::{Context, Result};
use tracing::{error, info, warn};
use super::{core::XiaohongshuAutomator, types::AppStatusResult};

/// Â∫îÁî®Áä∂ÊÄÅÁõ∏ÂÖ≥ÂäüËÉΩÊâ©Â±ï trait
pub trait AppStatusExt {
    async fn check_app_status(&self) -> Result<AppStatusResult>;
    async fn launch_app(&self) -> Result<()>;
    async fn force_stop_app(&self) -> Result<()>;
    async fn restart_app(&self) -> Result<()>;
}

impl AppStatusExt for XiaohongshuAutomator {
    /// Ê£ÄÊü•Â∫îÁî®Áä∂ÊÄÅ
    async fn check_app_status(&self) -> Result<AppStatusResult> {
        self.check_app_status_impl().await
    }

    /// ÂêØÂä®Â∫îÁî®
    async fn launch_app(&self) -> Result<()> {
        self.start_xiaohongshu_app().await
    }

    /// Âº∫Âà∂ÂÅúÊ≠¢Â∫îÁî®
    async fn force_stop_app(&self) -> Result<()> {
        // TODO: Ê∑ªÂä†ÂÆûÈôÖÁöÑÂº∫Âà∂ÂÅúÊ≠¢ÈÄªËæë
        info!("Âº∫Âà∂ÂÅúÊ≠¢Â∞èÁ∫¢‰π¶Â∫îÁî®");
        Ok(())
    }

    /// ÈáçÂêØÂ∫îÁî®
    async fn restart_app(&self) -> Result<()> {
        self.start_xiaohongshu_app().await
    }
}

impl XiaohongshuAutomator {
    /// Ê£ÄÊü•Â∞èÁ∫¢‰π¶Â∫îÁî®Áä∂ÊÄÅÔºàÂÆûÁé∞Ôºâ
    pub async fn check_app_status_impl(&self) -> Result<AppStatusResult> {
        info!("üîç Ê£ÄÊü•Â∞èÁ∫¢‰π¶Â∫îÁî®Áä∂ÊÄÅ");
        info!("‰ΩøÁî®ADBË∑ØÂæÑ: {}", self.adb_path);
        info!("ÁõÆÊ†áËÆæÂ§áID: {}", self.device_id);

        // È¶ñÂÖàÈ™åËØÅADBË∑ØÂæÑÊòØÂê¶Â≠òÂú®
        if !std::path::Path::new(&self.adb_path).exists() {
            let error_msg = format!("ADBÊñá‰ª∂‰∏çÂ≠òÂú®: {}", self.adb_path);
            error!("{}", error_msg);
            return Err(anyhow::anyhow!(error_msg));
        }

        // Ê£ÄÊü•Â∫îÁî®ÊòØÂê¶ÂÆâË£Ö
        let package_name = "com.xingin.xhs";
        let output = self.execute_adb_command(&[
                "-s",
                &self.device_id,
                "shell",
                "pm",
                "list",
                "packages",
                package_name,
            ])
            .context(format!("Ê£ÄÊü•Â∫îÁî®ÂÆâË£ÖÁä∂ÊÄÅÂ§±Ë¥• - ADBË∑ØÂæÑ: {}, ËÆæÂ§áID: {}", self.adb_path, self.device_id))?;

        info!("üìä Â∫îÁî®ÂÆâË£ÖÊ£ÄÊü•ÁªìÊûú: stdoutÈïøÂ∫¶={}, stderr={}", 
              output.stdout.len(), 
              String::from_utf8_lossy(&output.stderr));

        let app_installed = !output.stdout.is_empty() && 
                           String::from_utf8_lossy(&output.stdout).contains(package_name);

        if !app_installed {
            return Ok(AppStatusResult {
                app_installed: false,
                app_running: false,
                message: "Â∞èÁ∫¢‰π¶Â∫îÁî®Êú™ÂÆâË£Ö".to_string(),
                app_version: None,
                package_name: Some(package_name.to_string()),
            });
        }

        // Ê£ÄÊü•Â∫îÁî®ÊòØÂê¶Ê≠£Âú®ËøêË°å - ‰ΩøÁî®ÁÆÄÂåñÁöÑÊñπÊ≥ïÈÅøÂÖçWindowsÁÆ°ÈÅìÈóÆÈ¢ò
        let running_output = self.execute_adb_command(&[
                "-s",
                &self.device_id,
                "shell",
                "dumpsys",
                "activity",
                "activities",
            ])
            .context("Ê£ÄÊü•Â∫îÁî®ËøêË°åÁä∂ÊÄÅÂ§±Ë¥•")?;

        let running_result = String::from_utf8_lossy(&running_output.stdout);
        let app_running = running_result.contains(package_name);

        // Ëé∑ÂèñÂ∫îÁî®ÁâàÊú¨ - ‰ΩøÁî®ÁÆÄÂåñÁöÑÊñπÊ≥ïÈÅøÂÖçWindowsÁÆ°ÈÅìÈóÆÈ¢ò
        let version_output = self.execute_adb_command(&[
                "-s",
                &self.device_id,
                "shell",
                "dumpsys",
                "package",
                package_name,
            ])
            .context("Ëé∑ÂèñÂ∫îÁî®ÁâàÊú¨Â§±Ë¥•")?;

        let version_result = String::from_utf8_lossy(&version_output.stdout);
        let app_version = if version_result.contains("versionName") {
            // ‰ªédumpsysËæìÂá∫‰∏≠ÊèêÂèñversionName
            version_result
                .lines()
                .find(|line| line.contains("versionName"))
                .map(|line| line.trim().to_string())
        } else {
            None
        };

        let message = match (app_installed, app_running) {
            (true, true) => "Â∞èÁ∫¢‰π¶Â∫îÁî®Â∑≤ÂÆâË£Ö‰∏îÊ≠£Âú®ËøêË°å".to_string(),
            (true, false) => "Â∞èÁ∫¢‰π¶Â∫îÁî®Â∑≤ÂÆâË£Ö‰ΩÜÊú™ËøêË°å".to_string(),
            (false, _) => "Â∞èÁ∫¢‰π¶Â∫îÁî®Êú™ÂÆâË£Ö".to_string(),
        };

        Ok(AppStatusResult {
            app_installed,
            app_running,
            message,
            app_version,
            package_name: Some(package_name.to_string()),
        })
    }

    /// ÂêØÂä®Â∞èÁ∫¢‰π¶Â∫îÁî®
    pub async fn start_xiaohongshu_app(&self) -> Result<()> {
        info!("üöÄ ÂêØÂä®Â∞èÁ∫¢‰π¶Â∫îÁî®...");

        // ÊñπÊ≥ï1: ÈÄöËøáADBÂëΩ‰ª§Áõ¥Êé•ÂêØÂä®Â∫îÁî®ÔºàÂ∞ùËØïÂ§ö‰∏™ActivityÔºâ
        let activity_names = [
            "com.xingin.xhs/.index.v2.IndexActivityV2",
            "com.xingin.xhs/.index.IndexActivity", 
            "com.xingin.xhs/com.xingin.xhs.index.v2.IndexActivityV2",
            "com.xingin.xhs/com.xingin.xhs.index.IndexActivity"
        ];

        for activity in &activity_names {
            info!("üéØ Â∞ùËØïÂêØÂä®Activity: {}", activity);
            let output = self.execute_adb_command(&[
                    "-s", &self.device_id,
                    "shell", "am", "start",
                    "-n", activity
                ])
                .context("ÂêØÂä®Â∞èÁ∫¢‰π¶Â∫îÁî®Â§±Ë¥•");

            if let Ok(result) = output {
                if result.status.success() {
                    info!("‚úì Â∞èÁ∫¢‰π¶Â∫îÁî®ÂêØÂä®ÊàêÂäüÔºàÈÄöËøáADBÂëΩ‰ª§ÔºåActivity: {}Ôºâ", activity);
                    return Ok(());
                } else {
                    warn!("‚ö†Ô∏è Activity {} ÂêØÂä®Â§±Ë¥•", activity);
                }
            }
        }

        // ÊñπÊ≥ï2: Â¶ÇÊûúADBÂêØÂä®Â§±Ë¥•ÔºåÂ∞ùËØï‰ªéÊ°åÈù¢ÁÇπÂáªÂõæÊ†á
        warn!("‚ö†Ô∏è ADBÂêØÂä®Â§±Ë¥•ÔºåÂ∞ùËØï‰ªéÊ°åÈù¢ÁÇπÂáªÂ∞èÁ∫¢‰π¶ÂõæÊ†á");
        let ui_dump = self.get_ui_dump().await?;
        
        // Êü•ÊâæÂ∞èÁ∫¢‰π¶ÂõæÊ†áÁöÑÂùêÊ†á
        if let Some(xiaohongshu_bounds) = self.extract_xiaohongshu_icon_coords(&ui_dump) {
            info!("üìç ÊâæÂà∞Â∞èÁ∫¢‰π¶ÂõæÊ†áÂùêÊ†á: {:?}", xiaohongshu_bounds);
            
            // ËÆ°ÁÆóÁÇπÂáªÂùêÊ†áÔºàÂõæÊ†á‰∏≠ÂøÉÔºâ
            let click_x = (xiaohongshu_bounds.0 + xiaohongshu_bounds.2) / 2;
            let click_y = (xiaohongshu_bounds.1 + xiaohongshu_bounds.3) / 2;
            
            info!("üëÜ ÁÇπÂáªÂ∞èÁ∫¢‰π¶ÂõæÊ†áÂùêÊ†á: ({}, {})", click_x, click_y);
            self.click_coordinates(click_x, click_y).await?;
            
            info!("‚úì Â∞èÁ∫¢‰π¶Â∫îÁî®ÂêØÂä®ÊàêÂäüÔºàÈÄöËøáÁÇπÂáªÂõæÊ†áÔºâ");
            return Ok(());
        }

        // Â¶ÇÊûúÈÉΩÂ§±Ë¥•‰∫ÜÔºåËøîÂõûÈîôËØØ
        Err(anyhow::anyhow!("Êó†Ê≥ïÂêØÂä®Â∞èÁ∫¢‰π¶Â∫îÁî®ÔºöADBÂêØÂä®Â§±Ë¥•‰∏îÊú™ÊâæÂà∞Â∫îÁî®ÂõæÊ†á"))
    }

    /// ‰ªéUI dump‰∏≠ÊèêÂèñÂ∞èÁ∫¢‰π¶ÂõæÊ†áÂùêÊ†á
    fn extract_xiaohongshu_icon_coords(&self, ui_dump: &str) -> Option<(i32, i32, i32, i32)> {
        // Êü•ÊâæÂ∞èÁ∫¢‰π¶Áõ∏ÂÖ≥ÁöÑUIÂÖÉÁ¥†
        for line in ui_dump.lines() {
            if line.contains("Â∞èÁ∫¢‰π¶") || line.contains("xhs") || line.contains("RedBook") {
                if let Some(bounds) = self.extract_bounds_from_line(line) {
                    return Some(bounds);
                }
            }
        }
        None
    }

    /// ‰ªéXMLË°å‰∏≠ÊèêÂèñboundsÂ±ûÊÄß
    fn extract_bounds_from_line(&self, line: &str) -> Option<(i32, i32, i32, i32)> {
        // Êü•Êâæbounds="[left,top][right,bottom]"Ê†ºÂºè
        if let Some(bounds_start) = line.find("bounds=\"[") {
            let bounds_part = &line[bounds_start + 9..];
            if let Some(bounds_end) = bounds_part.find('"') {
                let bounds_str = &bounds_part[..bounds_end];
                
                // Ëß£Êûê "[left,top][right,bottom]" Ê†ºÂºè
                if let Some(middle) = bounds_str.find("][") {
                    let left_top = &bounds_str[..middle];
                    let right_bottom = &bounds_str[middle + 2..];
                    
                    if let (Some(comma1), Some(comma2)) = (left_top.find(','), right_bottom.find(',')) {
                        let left_str = &left_top[..comma1];
                        let top_str = &left_top[comma1 + 1..];
                        let right_str = &right_bottom[..comma2];
                        let bottom_str = &right_bottom[comma2 + 1..];
                        
                        if let (Ok(left), Ok(top), Ok(right), Ok(bottom)) = (
                            left_str.parse::<i32>(),
                            top_str.parse::<i32>(),
                            right_str.parse::<i32>(),
                            bottom_str.parse::<i32>()
                        ) {
                            return Some((left, top, right, bottom));
                        }
                    }
                }
            }
        }
        None
    }
}